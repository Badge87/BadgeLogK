package com.danielebachicchi.badgelogk

import android.content.Context
import java.io.File
import java.io.FileOutputStream
import java.io.PrintWriter

/**
 * [LogDestination] that will save the log inside files.
 */
class FileDestination(context: Context): LogDestination() {
    /**
     * The name of the log file.
     */
    val fileName: String = "log"
    /**
     * The path of the folder where the log files will be saved.
     * Default is inside [Context.getFilesDir]/logs/
     */
    val folder: File = File(context.filesDir, "logs")

    private lateinit var currentFile: File


    /**
     * Max number of files that this [LogDestination] will create
     */
    var maxFiles = 2

    /**
     * Max size in MB per single file. When a file reach this size, it will create another file if didn't
     * reach [FileDestination.maxFiles]. When [FileDestination.maxFiles] is reached. The older file
     * will be overwritten.
     *
     * This variable is used only if [FileDestination.maxFiles] is greater than 1.
     */
    var maxFilesizeMB = 10

    init {
        refreshFileStream()
    }

    /**
     * Return all log files generated by this [FileDestination].
     *
     * @return an array of [File] created by this [FileDestination]
     */
    fun getLogFiles(): Array<File> {
        val result: MutableList<File> = mutableListOf()
        result.add(currentFile)
        for (i in 1..maxFiles) {
            val tmp = File(folder, "$fileName$i.txt")
            if (tmp.exists())
                result.add(tmp)
        }
        return result.toTypedArray()
    }

    private fun refreshFileStream(){
        if (!folder.exists()) {
            folder.mkdirs()
        }
        currentFile = File(folder, "$fileName.txt")
        if(!currentFile.exists()) {
            currentFile.createNewFile()
        }


    }

    override fun send(
        level: Logger.LogLevel,
        message: String,
        error: Throwable?,
        tag: String,
        file: String,
        method: String,
        line: Int
    ): String {
        val result = super.send(level, message, error, tag, file, method, line)
        if (result.isEmpty())
            return ""

        if (maxFiles > 1 && currentFile.length()/1024.0/1024.0 > maxFilesizeMB) {
            rotate()
        }

        FileOutputStream(currentFile, true).let {
            it.bufferedWriter().use { writer ->
                writer.append("\n$result")
                writer.flush()
            }

        }



        return result
    }

    private fun rotate(){
            //rotate
            var file: File? = null
            val files: MutableList<File> = mutableListOf()
            for (i in 1..maxFiles){
                val tmp = File(folder, "$fileName$i.txt")
                if (!tmp.exists()) {
                    file = tmp
                    file.createNewFile()
                    break
                }
                files.add(tmp)
            }

            if (file == null) {
                file = files.sortedBy { it.lastModified() }[0]
            }

        file.let {
            currentFile.copyTo(it, true)
        }

        PrintWriter(currentFile)


    }


}